<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="var_preferences" xml:space="preserve">
    <value>var preferences</value>
  </data>
  <data name="Expression_bodied_members" xml:space="preserve">
    <value>Expression-bodied members</value>
  </data>
  <data name="Pattern_matching_preferences" xml:space="preserve">
    <value>Pattern matching preferences</value>
  </data>
  <data name="Null_checking_preferences" xml:space="preserve">
    <value>Null-checking preferences</value>
  </data>
  <data name="Code_block_preferences" xml:space="preserve">
    <value>Code-block preferences</value>
  </data>
  <data name="using_directive_preferences" xml:space="preserve">
    <value>'using' directive preferences</value>
    <comment>{Locked="using"} "using" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="Expected_string_or_char_literal" xml:space="preserve">
    <value>Expected string or char literal</value>
  </data>
  <data name="_0_1_is_not_supported_in_this_version" xml:space="preserve">
    <value>'{0}.{1}' is not supported in this version</value>
    <comment>{0}: A type name
{1}: A member name</comment>
  </data>
  <data name="Allow_bank_line_after_colon_in_constructor_initializer" xml:space="preserve">
    <value>Allow blank line after colon in constructor initializer</value>
  </data>
  <data name="Allow_blank_lines_between_consecutive_braces" xml:space="preserve">
    <value>Allow blank lines between consecutive braces</value>
  </data>
  <data name="Allow_embedded_statements_on_same_line" xml:space="preserve">
    <value>Allow embedded statements on same line</value>
  </data>
  <data name="Avoid_expression_statements_that_implicitly_ignore_value" xml:space="preserve">
    <value>Avoid expression statements that implicitly ignore value</value>
  </data>
  <data name="Avoid_unused_value_assignments" xml:space="preserve">
    <value>Avoid unused value assignments</value>
  </data>
  <data name="Elsewhere" xml:space="preserve">
    <value>Elsewhere</value>
  </data>
  <data name="For_built_in_types" xml:space="preserve">
    <value>For built-in types</value>
  </data>
  <data name="Ignore_spaces_in_declaration_statements" xml:space="preserve">
    <value>Ignore spaces in declaration statements</value>
  </data>
  <data name="Indent_block_contents" xml:space="preserve">
    <value>Indent block contents</value>
  </data>
  <data name="Indent_case_contents" xml:space="preserve">
    <value>Indent case contents</value>
  </data>
  <data name="Indent_case_contents_when_block" xml:space="preserve">
    <value>Indent case contents (when block)</value>
  </data>
  <data name="Indent_case_labels" xml:space="preserve">
    <value>Indent case labels</value>
  </data>
  <data name="Indent_open_and_close_braces" xml:space="preserve">
    <value>Indent open and close braces</value>
  </data>
  <data name="Insert_spaces_within_square_brackets" xml:space="preserve">
    <value>Insert spaces within square brackets</value>
  </data>
  <data name="Insert_space_after_cast" xml:space="preserve">
    <value>Insert space after cast</value>
  </data>
  <data name="Insert_space_after_colon_for_base_or_interface_in_type_declaration" xml:space="preserve">
    <value>Insert space after colon for base or interface in type declaration</value>
  </data>
  <data name="Insert_space_after_comma" xml:space="preserve">
    <value>Insert space after comma</value>
  </data>
  <data name="Insert_space_after_dot" xml:space="preserve">
    <value>Insert space after dot</value>
  </data>
  <data name="Insert_space_after_keywords_in_control_flow_statements" xml:space="preserve">
    <value>Insert space after keywords in control flow statements</value>
  </data>
  <data name="Insert_space_after_semicolon_in_for_statement" xml:space="preserve">
    <value>Insert space after semicolon in "for" statement</value>
  </data>
  <data name="Insert_space_before_colon_for_base_or_interface_in_type_declaration" xml:space="preserve">
    <value>Insert space before colon for base or interface in type declaration</value>
  </data>
  <data name="Insert_space_before_comma" xml:space="preserve">
    <value>Insert space before comma</value>
  </data>
  <data name="Insert_space_before_dot" xml:space="preserve">
    <value>Insert space before dot</value>
  </data>
  <data name="Insert_space_before_open_square_bracket" xml:space="preserve">
    <value>Insert space before open square bracket</value>
  </data>
  <data name="Insert_space_before_semicolon_in_for_statement" xml:space="preserve">
    <value>Insert space before semicolon in "for" statement</value>
  </data>
  <data name="Insert_space_between_method_name_and_its_opening_parenthesis1" xml:space="preserve">
    <value>Insert space between method name and its opening parenthesis</value>
  </data>
  <data name="Insert_space_between_method_name_and_its_opening_parenthesis2" xml:space="preserve">
    <value>Insert space between method name and its opening parenthesis</value>
  </data>
  <data name="Insert_space_within_argument_list_parentheses" xml:space="preserve">
    <value>Insert space within argument list parentheses</value>
  </data>
  <data name="Insert_space_within_empty_argument_list_parentheses" xml:space="preserve">
    <value>Insert space within empty argument list parentheses</value>
  </data>
  <data name="Insert_space_within_empty_parameter_list_parentheses" xml:space="preserve">
    <value>Insert space within empty parameter list parentheses</value>
  </data>
  <data name="Insert_space_within_empty_square_brackets" xml:space="preserve">
    <value>Insert space within empty square brackets</value>
  </data>
  <data name="Insert_space_within_parameter_list_parentheses" xml:space="preserve">
    <value>Insert space within parameter list parentheses</value>
  </data>
  <data name="Insert_space_within_parentheses" xml:space="preserve">
    <value>Insert space within parentheses</value>
  </data>
  <data name="Label_Indentation" xml:space="preserve">
    <value>Label Indentation</value>
  </data>
  <data name="Leave_block_on_single_line" xml:space="preserve">
    <value>Leave block on single line</value>
  </data>
  <data name="Leave_statements_and_member_declarations_on_the_same_line" xml:space="preserve">
    <value>Leave statements and member declarations on the same line</value>
  </data>
  <data name="Namespace_declarations" xml:space="preserve">
    <value>Namespace declarations</value>
  </data>
  <data name="Place_catch_on_new_line" xml:space="preserve">
    <value>Place "catch" on new line</value>
  </data>
  <data name="Place_else_on_new_line" xml:space="preserve">
    <value>Place "else" on new line</value>
  </data>
  <data name="Place_finally_on_new_line" xml:space="preserve">
    <value>Place "finally" on new line</value>
  </data>
  <data name="Place_members_in_anonymous_types_on_new_line" xml:space="preserve">
    <value>Place members in anonymous types on new line</value>
  </data>
  <data name="Place_members_in_object_initializers_on_new_line" xml:space="preserve">
    <value>Place members in object initializers on new line</value>
  </data>
  <data name="Place_open_brace_on_new_line" xml:space="preserve">
    <value>Place open brace on new line</value>
  </data>
  <data name="Place_query_expression_clauses_on_new_line" xml:space="preserve">
    <value>Place query expression clauses on new line</value>
  </data>
  <data name="Preferred_using_directive_placement" xml:space="preserve">
    <value>Preferred 'using' directive placement</value>
  </data>
  <data name="Prefer_braces" xml:space="preserve">
    <value>Prefer braces</value>
  </data>
  <data name="Prefer_conditional_delegate_call" xml:space="preserve">
    <value>Prefer conditional delegate call</value>
  </data>
  <data name="Prefer_deconstructed_variable_declaration" xml:space="preserve">
    <value>Prefer deconstructed variable declaration</value>
  </data>
  <data name="Prefer_extended_property_pattern" xml:space="preserve">
    <value>Prefer extended property pattern</value>
  </data>
  <data name="Prefer_implicit_object_creation_when_type_is_apparent" xml:space="preserve">
    <value>Prefer implicit object creation when type is apparent</value>
  </data>
  <data name="Prefer_index_operator" xml:space="preserve">
    <value>Prefer index operator</value>
  </data>
  <data name="Prefer_inlined_variable_declaration" xml:space="preserve">
    <value>Prefer inlined variable declaration</value>
  </data>
  <data name="Prefer_local_function_over_anonymous_function" xml:space="preserve">
    <value>Prefer local function over anonymous function</value>
  </data>
  <data name="Prefer_method_group_conversion" xml:space="preserve">
    <value>Prefer method group conversion</value>
  </data>
  <data name="Prefer_null_check_over_type_check" xml:space="preserve">
    <value>Prefer 'null' check over type check</value>
  </data>
  <data name="Prefer_pattern_matching" xml:space="preserve">
    <value>Prefer pattern matching</value>
  </data>
  <data name="Prefer_pattern_matching_over_as_with_null_check" xml:space="preserve">
    <value>Prefer pattern matching over 'as' with 'null' check</value>
  </data>
  <data name="Prefer_pattern_matching_over_is_with_cast_check" xml:space="preserve">
    <value>Prefer pattern matching over 'is' with 'cast' check</value>
  </data>
  <data name="Prefer_pattern_matching_over_mixed_type_check" xml:space="preserve">
    <value>Prefer pattern matching over mixed type check</value>
  </data>
  <data name="Prefer_range_operator" xml:space="preserve">
    <value>Prefer range operator</value>
  </data>
  <data name="Prefer_simple_default_expression" xml:space="preserve">
    <value>Prefer simple 'default' expression</value>
  </data>
  <data name="Prefer_simple_using_statement" xml:space="preserve">
    <value>Prefer simple 'using' statement</value>
  </data>
  <data name="Prefer_static_local_functions" xml:space="preserve">
    <value>Prefer static local functions</value>
  </data>
  <data name="Prefer_switch_expression" xml:space="preserve">
    <value>Prefer switch expression</value>
  </data>
  <data name="Prefer_throw_expression" xml:space="preserve">
    <value>Prefer throw-expression</value>
  </data>
  <data name="Prefer_top_level_statements" xml:space="preserve">
    <value>Prefer top-level statements</value>
  </data>
  <data name="Prefer_tuple_swap" xml:space="preserve">
    <value>Prefer tuple swap</value>
  </data>
  <data name="Prefer_Utf8_string_literals" xml:space="preserve">
    <value>Prefer UTF-8 string literals</value>
  </data>
  <data name="Set_spacing_for_operators" xml:space="preserve">
    <value>Set spacing for operators</value>
  </data>
  <data name="Use_expression_body_for_accessors" xml:space="preserve">
    <value>Use expression body for accessors</value>
  </data>
  <data name="Use_expression_body_for_constructors" xml:space="preserve">
    <value>Use expression body for constructors</value>
  </data>
  <data name="Use_expression_body_for_indexers" xml:space="preserve">
    <value>Use expression body for indexers</value>
  </data>
  <data name="Use_expression_body_for_lambdas" xml:space="preserve">
    <value>Use expression body for lambdas</value>
  </data>
  <data name="Use_expression_body_for_local_functions" xml:space="preserve">
    <value>Use expression body for local functions</value>
  </data>
  <data name="Use_expression_body_for_methods" xml:space="preserve">
    <value>Use expression body for methods</value>
  </data>
  <data name="Use_expression_body_for_operators" xml:space="preserve">
    <value>Use expression body for operators</value>
  </data>
  <data name="Use_expression_body_for_properties" xml:space="preserve">
    <value>Use expression body for properties</value>
  </data>
  <data name="When_variable_type_is_apparent" xml:space="preserve">
    <value>When variable type is apparent</value>
  </data>
</root>